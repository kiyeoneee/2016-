package JList;


import java.io.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/* ListDemo.java requires no other files. */
public class JListMain extends JPanel implements ListSelectionListener {
	private JList list, list1;
	private DefaultListModel listModel, listModel1;
	private Vector<String> dataVec = new Vector<String>();
	private Vector<String> dataVec1 = new Vector<String>();
	private String[] itemData, itemData1;
	//private String[] str = { "Debbie Scott", "Scott Hommel" };

	private static final String hireString = "입력 추가";
	private static final String fireString = "선택 삭제";
	private static final String randomFireString = "랜덤 삭제";
	private JButton fireButton, hireButton, randomFireButton;
	private JTextField employeeName;
	
	private String filename = "data.txt";
	private String filename1 = "data1.txt";

	public JListMain() {
		super(new BorderLayout());
		getData();

		itemData = new String[dataVec.size()];
		itemData1 = new String[dataVec1.size()];
		for(int i = 0; i < dataVec.size(); i++) itemData[i] = dataVec.elementAt(i);
		for(int i = 0; i < dataVec1.size(); i++) itemData1[i] = dataVec1.elementAt(i);
		
		listModel = new DefaultListModel();
		listModel1 = new DefaultListModel();
		
		for (String s : itemData)
			listModel.addElement(s);
		for (String s : itemData1)
			listModel1.addElement(s);
		

		// Create the list and put it in a scroll pane.
		list = new JList(listModel);
		list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		list.setSelectedIndex(0);
		list.addListSelectionListener(this);
		JScrollPane listScrollPane = new JScrollPane(list);
		
		list1 = new JList(listModel1);
		list1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		list1.setSelectedIndex(0);
		list1.addListSelectionListener(this);
		JScrollPane listScrollPane1 = new JScrollPane(list1);

		hireButton = new JButton(hireString);
		HireListener hireListener = new HireListener(hireButton);
		hireButton.setActionCommand(hireString);
		hireButton.addActionListener(hireListener);
		hireButton.setEnabled(false);

		fireButton = new JButton(fireString);
		fireButton.setActionCommand(fireString);
		fireButton.addActionListener(new FireListener());
		
		randomFireButton = new JButton(randomFireString);
		randomFireButton.setActionCommand(randomFireString);
		randomFireButton.addActionListener(new RandomFireListener());

		employeeName = new JTextField(10);
		employeeName.addActionListener(hireListener);
		employeeName.getDocument().addDocumentListener(hireListener);
		String name = listModel.getElementAt(list.getSelectedIndex()).toString();

		// Create a panel that uses BoxLayout.
		JPanel buttonPane = new JPanel();
		buttonPane.setLayout(new BoxLayout(buttonPane, BoxLayout.LINE_AXIS));
		buttonPane.add(fireButton);
		buttonPane.add(randomFireButton);
		buttonPane.add(Box.createHorizontalStrut(5));
		buttonPane.add(new JSeparator(SwingConstants.VERTICAL));
		buttonPane.add(Box.createHorizontalStrut(5));
		buttonPane.add(employeeName);
		buttonPane.add(hireButton);
		buttonPane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

		JPanel jp = new JPanel();
		jp.add(listScrollPane, new GridLayout());
		jp.add(listScrollPane1, new GridLayout());
		JScrollPane jsp = new JScrollPane(jp);
		add(listScrollPane, BorderLayout.PAGE_START);
		add(listScrollPane1, BorderLayout.CENTER);
		add(buttonPane, BorderLayout.SOUTH);
	}

	class RandomFireListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			Random random = new Random();
			int index = random.nextInt(itemData.length);
			JOptionPane.showMessageDialog(null, String.valueOf(index + 1) + " : " + itemData[index]);
			
			listModel.remove(index);

			int size = listModel.getSize();

			if (size == 0) { // Nobody's left, disable firing.
				fireButton.setEnabled(false);

			} else { // Select an index.
				if (index == listModel.getSize()) {
					// removed item in last position
					index--;
				}

				list.setSelectedIndex(index);
				list.ensureIndexIsVisible(index);
			}
			updateData();
		}
	}
	
	class FireListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			// This method can be called only if
			// there's a valid selection
			// so go ahead and remove whatever's selected.
			int index = list.getSelectedIndex();
			listModel.remove(index);

			int size = listModel.getSize();

			if (size == 0) { // Nobody's left, disable firing.
				fireButton.setEnabled(false);

			} else { // Select an index.
				if (index == listModel.getSize()) {
					// removed item in last position
					index--;
				}

				list.setSelectedIndex(index);
				list.ensureIndexIsVisible(index);
			}
			updateData();
		}
	}

	// This listener is shared by the text field and the hire button.
	class HireListener implements ActionListener, DocumentListener {
		private boolean alreadyEnabled = false;
		private JButton button;

		public HireListener(JButton button) {
			this.button = button;
		}

		// Required by ActionListener.
		public void actionPerformed(ActionEvent e) {
			String name = employeeName.getText();

			// User didn't type in a unique name...
			if (name.equals("") || alreadyInList(name)) {
				Toolkit.getDefaultToolkit().beep();
				employeeName.requestFocusInWindow();
				employeeName.selectAll();
				return;
			}

			int index = list.getSelectedIndex(); // get selected index
			if (index == -1) { // no selection, so insert at beginning
				index = 0;
			} else { // add after the selected item
				index = (itemData.length);
			}

			listModel.insertElementAt(employeeName.getText(), itemData.length);
			
			// If we just wanted to add to the end, we'd do this:
			// listModel.addElement(employeeName.getText());

			// Reset the text field.
			employeeName.requestFocusInWindow();
			employeeName.setText("");

			// Select the new item and make it visible.
			list.setSelectedIndex(index);
			list.ensureIndexIsVisible(index);
			updateData();
		}

		// This method tests for string equality. You could certainly
		// get more sophisticated about the algorithm. For example,
		// you might want to ignore white space and capitalization.
		protected boolean alreadyInList(String name) {
			return listModel.contains(name);
		}

		// Required by DocumentListener.
		public void insertUpdate(DocumentEvent e) {
			enableButton();
		}

		// Required by DocumentListener.
		public void removeUpdate(DocumentEvent e) {
			handleEmptyTextField(e);
		}

		// Required by DocumentListener.
		public void changedUpdate(DocumentEvent e) {
			if (!handleEmptyTextField(e)) {
				enableButton();
			}
		}

		private void enableButton() {
			if (!alreadyEnabled) {
				button.setEnabled(true);
			}
		}

		private boolean handleEmptyTextField(DocumentEvent e) {
			if (e.getDocument().getLength() <= 0) {
				button.setEnabled(false);
				alreadyEnabled = false;
				return true;
			}
			return false;
		}
	}

	// This method is required by ListSelectionListener.
	public void valueChanged(ListSelectionEvent e) {
		if (e.getValueIsAdjusting() == false) {

			if (list.getSelectedIndex() == -1) {
				// No selection, disable fire button.
				fireButton.setEnabled(false);

			} else {
				// Selection, enable the fire button.
				fireButton.setEnabled(true);
			}
		}
	}

	/**
	 * Create the GUI and show it. For thread safety, this method should be
	 * invoked from the event-dispatching thread.
	 */
	private static void createAndShowGUI() {
		// Create and set up the window.
		JFrame frame = new JFrame("ListDemo");
		frame.setBounds(150, 150, 200, 250);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		// Create and set up the content pane.
		JComponent newContentPane = new JListMain();
		newContentPane.setOpaque(true); // content panes must be opaque
		frame.setContentPane(newContentPane);

		// Display the window.
		frame.pack();
		frame.setVisible(true);
	}

	public void getData() {
		try {
			BufferedReader file = new BufferedReader(new FileReader(filename));
			BufferedReader file1 = new BufferedReader(new FileReader(filename1));
			String data = file.readLine();
			String data1 = file1.readLine();

			if (data != null || data != null) {
				while (data != null) {
					dataVec.addElement(data);
					data = file.readLine();
				}
				while (data1 != null) {
					dataVec1.addElement(data1);
					data1 = file1.readLine();
				}
				file.close();
				file1.close();
			}
		} catch (IOException e) {
			System.out.println("File Not Found\n");
			e.printStackTrace();
		}
	}
	
	public void updateData(){
		try {
			PrintWriter pw = new PrintWriter("data.txt");
			for(int i = 0; i < listModel.size(); i++) pw.println(listModel.getElementAt(i));
			pw.close();
		} catch (IOException e) {
			System.out.println("File Not Found\n");
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		// Schedule a job for the event-dispatching thread:
		// creating and showing this application's GUI.
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				createAndShowGUI();
			}
		});
	}
}