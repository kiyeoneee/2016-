package CategoryClassification;

import java.io.File;
import java.util.*;

import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.w3c.dom.Element;
import org.w3c.dom.traversal.*;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.JTextPane;
//import javax.swing.text.Document;

public class ClassificationMain {
	//private JFrame frame;
	//private JTable table;

	public String[][][] categoryList;
	public String[][][] categoryName;
	public int[][][] categoryCode;
	
	public static void main(String[] args) {
		ClassificationMain CM = new ClassificationMain();
	}

	public ClassificationMain() {
		try {
			Document document = getData();
			NodeList node = document.getChildNodes();
			setArray(node.item(0).getChildNodes());

		} catch (Exception e) {
			e.printStackTrace();
		}

		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ClassificationFrame window = new ClassificationFrame(categoryList, categoryName, categoryCode);
					window.frame.setVisible(true);
					window.frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public static Document getData() {
		try {
			File xmlFile = new File("korea_category.xml");

			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			factory.setIgnoringElementContentWhitespace(true);
			Document document = builder.parse(xmlFile);
			document.getDocumentElement().normalize();
			
			return document;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	public void setArray(NodeList node) {
		categoryList = new String[node.getLength()/2][][];
		categoryName = new String[node.getLength()/2][][];
		categoryCode = new int[node.getLength()/2][][];
		
		for (int i = 0; i < node.getLength(); i++) {
			if(node.item(i).getNodeName() == "#text")
				continue;
			NodeList depth1 = node.item(i).getChildNodes();
			
			int indexI = i/2;
			categoryList[indexI] = new String[depth1.getLength()/2 + 1][];
			categoryList[indexI][0] = new String[1];
			categoryName[indexI] = new String[depth1.getLength()/2 + 1][];
			categoryName[indexI][0] = new String[1];
			categoryCode[indexI] = new int[depth1.getLength()/2 + 1][];
			categoryCode[indexI][0] = new int[1];

			for (int j = 1; j < depth1.getLength(); j++) {
				if(depth1.item(j).getNodeName() == "#text")
					continue;
				int indexJ = j/2;
				NodeList depth2 = depth1.item(j).getChildNodes();
				
				categoryList[indexI][indexJ + 1] = new String[depth2.getLength()/2 + 1];
				categoryName[indexI][indexJ + 1] = new String[depth2.getLength()/2 + 1];
				categoryCode[indexI][indexJ + 1] = new int[depth2.getLength()/2 + 1];
				
				for(int k = 1; k < depth2.getLength(); k++){
					if(depth2.item(k).getNodeName() == "#text")
						continue;
					int indexK = k/2;
					//가장 하단 카테고리
					if (depth2.item(k).getNodeType() == Node.ELEMENT_NODE){
						Element elemH2 = (Element) depth2.item(k);
						String str = elemH2.getAttribute("name");
						categoryList[indexI][indexJ + 1][indexK + 1] = str;
						categoryName[indexI][indexJ + 1][indexK + 1] = str.substring(4);
						categoryCode[indexI][indexJ + 1][indexK + 1] = Integer.parseInt(str.substring(0, 3));
					}
				}
				
				//중간 카테고리
				if (depth1.item(j).getNodeType() == Node.ELEMENT_NODE){
					Element elemH1 = (Element) depth1.item(j);
					String str = elemH1.getAttribute("name");
					categoryList[indexI][indexJ + 1][0] = str;
					categoryName[indexI][indexJ + 1][0] = str.substring(4);
					categoryCode[indexI][indexJ + 1][0] = Integer.parseInt(str.substring(0, 3));
				}
			}
			//상단 카테고리
			if (node.item(i).getNodeType() == Node.ELEMENT_NODE){
				Element elemH = (Element) node.item(i);
				String str = elemH.getAttribute("name");
				categoryList[indexI][0][0] = str; 
				categoryName[indexI][0][0] = str.substring(4);
				categoryCode[indexI][0][0] = Integer.parseInt(str.substring(0, 3));
			}	
		}
	}
}
