package CategoryClassification;

import java.io.File;
import java.util.*;

import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.w3c.dom.Element;
import org.w3c.dom.traversal.*;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.JTextPane;
//import javax.swing.text.Document;

public class ClassificationMain {
	//private JFrame frame;
	//private JTable table;

	String[][][] categoryList;

	public static void main(String[] args) {
		ClassificationMain CM = new ClassificationMain();
	}

	public ClassificationMain() {
		try {
			Document document = getData();
			NodeList node = document.getChildNodes();
			categoryList = setArray(node.item(0).getChildNodes());

		} catch (Exception e) {
			e.printStackTrace();
		}

		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ClassificationFrame window = new ClassificationFrame();
					window.frame.setVisible(true);
					window.frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public static Document getData() {
		try {
			File xmlFile = new File("korea_category.xml");

			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			factory.setIgnoringElementContentWhitespace(true);
			Document document = builder.parse(xmlFile);
			document.getDocumentElement().normalize();
			// System.out.println(document);
			return document;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	public String[][][] setArray(NodeList node) {
		ArrayList<String> ary = new ArrayList();
		String[][][] category = new String[node.getLength()/2][][];
		
		for (int i = 0; i < node.getLength(); i++) {
			if(node.item(i).getNodeName() == "#text")
				continue;
			NodeList depth1 = node.item(i).getChildNodes();
			int indexI = i/2;
			category[indexI] = new String[depth1.getLength()/2][];

			for (int j = 1; j <= depth1.getLength(); j++) {
				if(depth1.item(j).getNodeName() == "#text")
					continue;
				int indexJ = j/2;
				NodeList depth2 = depth1.item(j).getChildNodes();
				category[indexI][indexJ] = new String[depth2.getLength()/2];
				
				//중간 카테고리
				if (depth1.item(i).getNodeType() == Node.ELEMENT_NODE){
					Element elemH1 = (Element) depth1.item(j);
					category[indexI][indexJ][0] = elemH1.getAttribute("name");
				}
				
				for(int k = 1; k <= depth2.getLength(); k++){
					if(depth2.item(i).getNodeName() == "#text")
						continue;
					int indexK = j/2;
					//가장 하단 카테고리
					if (depth2.item(i).getNodeType() == Node.ELEMENT_NODE){
						Element elem = (Element) depth2.item(k);
						category[indexI][indexJ][indexK] = elem.getAttribute("name");
					}
				}

				//상단 카테고리
				if (node.item(i).getNodeType() == Node.ELEMENT_NODE){
					Element elemH = (Element) node.item(i);
					category[indexI][0][0] = elemH.getAttribute("name"); 
				}
				
			}
		}
		System.out.println(category);
		return category;
	}
	/*
	 * if(node.getLength() == 1 && node.item(0).getNodeName() == "#text") return
	 * null;
	 * 
	 * ArrayList<String> ary = new ArrayList();
	 * 
	 * for (int i = 0; i < node.getLength(); i++){ if
	 * (node.item(i).hasChildNodes()){ NodeList nL =
	 * node.item(i).getChildNodes(); ArrayList<String> str = setArray(nL);
	 * ary.add; if(node.item(i).getNodeType() == Node.ELEMENT_NODE){ Element
	 * element = (Element) node.item(i);
	 * 
	 * // System.out.println(element.getAttribute("name")); } }
	 * 
	 * }
	 * 
	 * return ary; }
	 */
}
