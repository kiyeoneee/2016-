package CategoryClassification;

import java.io.File;
import java.util.*;

import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.w3c.dom.Element;
import org.w3c.dom.traversal.*;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.JTextPane;
//import javax.swing.text.Document;

public class ClassificationMain {
	private JFrame frame;
	private JTable table;

	ArrayList<String> categoryList = new ArrayList();

	public static void main(String[] args) {
		ClassificationMain CM = new ClassificationMain();
	}
	
	public ClassificationMain() {
		try {
			Document document = getData();
			NodeList node = document.getChildNodes();
			categoryList = setArray(node);
			
		} catch (Exception e) {
			e.printStackTrace();
		}

		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ClassificationFrame window = new ClassificationFrame();
					window.frame.setVisible(true);
					window.frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	

	public static Document getData() {
		try {
			File xmlFile = new File("korea_category.xml");

			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document document = builder.parse(xmlFile);
			document.getDocumentElement().normalize();
			//System.out.println(document);
			return document;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	public ArrayList<String> setArray(NodeList node){
		if(node.getLength() == 1 && node.item(0).getNodeName() == "#text")
			return null;
		
		ArrayList<String> ary = new ArrayList();
		
		for (int i = 0; i < node.getLength(); i++){
			//if (node.item(i).hasChildNodes()){
			NodeList nL = node.item(i).getChildNodes();
			if(nL.getLength() != 1){
				setArray(nL);
			}
				Element elem = (Element) node.item(i);
				System.out.println(elem.getAttribute("name"));
			//}
			//else break;
			
			
			
		}
		
		return ary;
	}

}
